Non-greedy quantifier là một loại quantifier trong regular expression được sử dụng để khớp với ít ký tự nhất có thể, ngược lại với greedy quantifier, mà sẽ khớp với nhiều ký tự nhất có thể.

Trong regular expression, quantifier xác định số lần mà một mẫu hoặc một nhóm mẫu có thể xuất hiện trong chuỗi. Có hai loại quantifier phổ biến:

Greedy Quantifier: Nó khớp với nhiều ký tự nhất có thể. Đối với các quantifier greedy, mẫu sẽ cố gắng khớp với càng nhiều ký tự nào tương ứng với mẫu càng tốt. Ví dụ, *, +, {m,n} là greedy quantifiers.

Non-Greedy Quantifier (Lazy hoặc Reluctant): Nó khớp với ít ký tự nhất có thể. Đối với các quantifier non-greedy, mẫu sẽ cố gắng khớp với càng ít ký tự nào tương ứng với mẫu càng tốt. Ví dụ, *?, +?, {m,n}? là non-greedy quantifiers.

Ví dụ:

.* là một greedy quantifier và sẽ khớp với càng nhiều ký tự nào có thể.
.*? là một non-greedy quantifier và sẽ khớp với ít ký tự nhất có thể.
Sử dụng non-greedy quantifier có thể hữu ích trong việc tạo ra các mẫu chính xác và hiệu quả, đặc biệt khi bạn cần khớp với một phần nhỏ nhất của chuỗi.
==============


Dưới đây là một số lookahead assertion phổ biến trong regular expression:

1. **Positive Lookahead Assertion `(?= ... )`**: Kiểm tra xem một pattern nhất định xuất hiện SAU vị trí hiện tại trong chuỗi mà không tiêu tốn các ký tự trong chuỗi.
Ví dụ: `(?=.*[A-Z])` kiểm tra xem có ít nhất một ký tự viết hoa từ 'A' đến 'Z' sau vị trí hiện tại không.

2. **Negative Lookahead Assertion `(?! ... )`**: Kiểm tra xem một pattern nhất định không xuất hiện sau vị trí hiện tại trong chuỗi mà không tiêu tốn các ký tự trong chuỗi.
Ví dụ: `(?!.*[0-9])` kiểm tra xem không có chữ số nào sau vị trí hiện tại trong chuỗi.

3. **Positive Lookbehind Assertion `(?<= ... )`**: Kiểm tra xem một pattern nhất định xuất hiện TRƯỚC vị trí hiện tại trong chuỗi mà không tiêu tốn các ký tự trong chuỗi.
Lưu ý rằng một số ngôn ngữ hoặc công cụ regex không hỗ trợ positive lookbehind. Ví dụ: `(?<=\$)\d+` kiểm tra xem có một số nguyên sau dấu "$".

4. **Negative Lookbehind Assertion `(?<! ... )`**: Kiểm tra xem một pattern nhất định không xuất hiện trước vị trí hiện tại trong chuỗi mà không tiêu tốn các ký tự trong chuỗi.
Ví dụ: `(?<!\$)\d+` kiểm tra xem có một số nguyên không có dấu "$" trước.

Các lookahead và lookbehind assertion là công cụ mạnh mẽ trong regular expression để thực hiện các kiểm tra điều kiện phức tạp trên các chuỗi.
Tuy nhiên, cần chú ý rằng một số ngôn ngữ hoặc công cụ regex có thể không hỗ trợ tất cả các loại này.